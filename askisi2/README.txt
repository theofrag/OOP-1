### ΑΣΚΗΣΗ 2 ###


Εντολή μεταγλώττισης: g++ -std=c++11 hw2.cpp main.cpp -o main

Όταν δωθεί η εντολη για να τρεξει το προγραμμα, θα πρεπει να δωθουν 2 ακεραιοι και 2 δεκαδικοί ως ορίσματα απο την γραμμη εντολων(πχ main ./10 10 0.9 0.1)


Χρειάστηκε η c++11 μονο για την συναρτηση to_string() στην main.

Σημειωση: Το valgrind στα μηχανηματα της σχολης βγαζει οτι υπάρχουν 72.704 bytes που δεν εχουν γίνει free. Υστερα απο ψαξιμο στο internet κατέληξα στο οτι ειναι bug της εκδοσης του compiler και οχι προβλημα του προγραμματος μου





Δομές που επιλέχθηκαν:
    Class Student -- για τους μαθητες
    Class Sequence -- για τις ακολουθιες
    struct couple -- Απλά ένας πίνακας 2 δεικτών σε δομή τύπου Student, είναι private μέλος της δομής sequence

-----------------------------------------------

Class Student αποτελείται απο:

    - 2 strings που συμβολίζουν όνομα και φύλο αντίστοιχα.
    - ακέραιο που συμβολίζει ID τάξης.
    - boolean τιμή που συμβολίζει αν ένας μαθητής είναι άτακτος.

    Όλα τα παραπάνω ειναι private μέλη. Δεν ενδιαφέρουν τον χρήστη και συνεπώς δεν πρέπει να έχει πρόσβαση σε αυτά. Μπορει να  αλλαξει
    μονο όσα επιτρεπεται με public συναρτησεις.

Συναρτήσεις μέλη:

    Student(string ,string ,int ):
        Άπλα αρχικοποιέι τα μέλη του student.
    
    string studentName():
        Άπλα επιστρέφει το όνομα του μαθητή
    
    string studentGender():
        Άπλα επιστρέφει το φύλο του μαθητή
    
    int classroomId():
        'Απλα επιστρέφει το ID της τάξης που ανήκει ο μαθητής
    
    void make_naughty(bool ):
        Άπλα ορίζει έναν μαθητή ως άτακτο ή ήσυχο.
    
    bool is_naughty():
        Επιστρέφει άν true αν ο μαθητής είναι άτακτος, false αλλιως.
    
    void print_student(), void print_gender() , void print_class():
        Ετκυπώνουν το όνομα του μαθητή, το φύλο του και το id της τάξης του αντίστοιχα.


Class Sequence αποτελείται απο:

    -2 floats(Tmessy, Tquiet)
    -1 ακεραιο (couplesNumber) που συμβολίζει τον αριθμό των ζευγαριών της ακολουθίας
    -1 ακεραιο(id) που είναι το id της ακολουθιας.
    -2 ακεραιους(counterBoy, CounterGirl) που μετράει πόσα αγόρια και πόσα κορίτσια, εχουν μπει
        στην ακολουθία.
    -2 ακέραιους(tempBoy, tempGirl) που αλλάζουν τιμές απο το 0 στο 1 , ώστε να καθορίζονται οι θέσεις
        του πίνακα που θα μπουν τα αγόρια και το κορίτσια, γιατι πρέπει να είναι εναλλάξ.
    -1 ακέραιο (naughtyCounter) που κρατάει τον βαθμό αταξίας
    -1 δείκτη σε μια class του ίδιου τύπου
    -1 δείκτη σε μια εσωτερική struct που αναπαριστά τα ζευγάρια.

    Όλα τα παραπάνω ειναι private μέλη. Δεν ενδιαφέρουν τον χρήστη και συνεπώς δεν πρέπει να έχει πρόσβαση σε αυτά. Μπορει να  αλλαξει
    μονο όσα επιτρεπεται με public συναρτησεις και να εκτελεσει λειτουργιες που σχετιζονται με αυτα μονο απο τις public συναρτησεις.


Συναρτήσεις μέλη:

Constructor της Sequence:

        Παίρνει ως όρισμα έναν δείκτη σε πίνακα δεικτών που δειχνει σε μαθητες, και το πλήθος των μαθητών του πίνακα.
        Ο πίνακας θα πρεπει να εχει μαθητες που ανηκουν στην ιδια ταξη, δηλαδη μαθητες με ιδιο ID, αλλιως η συμπεριφορα
        ειναι undefined. Επομένως ο πίνακας πρέπει να αρχικοποιήται όπως φαίνεται και στην main.

        Αρχικα αρχικοποιεί όλες της μεταβλητες της Sequence. Αναλογα με το μεγεθος του πινακα που εχουμε δωσει
        δεσμευει τον καταλληλο χωρο για τα ζευγαρια των μαθητων. Υστερα καλει την add_student() για να βαλει τους
        μαθητες στις καταλληλες θεσεις.
    
    void add_student(Student& ):

        Private συνάρτηση. Δεν χρειάζεται να την γνωρίζει ο χρήστης ούτε και να μπορεί να την χρησιμοποιήσει.
            Αυτό γιατί είναι συνάρτηση που ουσιαστικά καλείται απο τον constructor της sequence για πιο καθαρό
            κώδικα.

        Παίρνει έναν μαθητή, ελέγχει το φύλο του και ανάλογα τον βάζει σε μια θέση στον πίνακα με τα ζευγάρια.
        Επειδή τα αγόρια με τα κορίτσια πρεπει να είναι εναλλαξ, οι ακέραιοι tempBoy και tempGirl ,αλλάζουν τιμές
        απο 0 σε 1 , αναλογα με  την προηγούμενης τιμής τους. Καθε κορίτσι αρχικα μπαίνει στην θέση 1 και κάθε αγόρι
        στην θέση 0. Το δεύτερο κορίτσι θα μπει στην θέση 0 και το δευτερο  αγόρι στην θέση 1 και ου το καθεξης.


    void restoreQuitness():
        H restoreQuitness() είναι private. Καλείται όμως απο την συνάρτηση restore() η οποία ειναι public. Ουσιαστικα αυτό 
            που κάνει η restoreQuitness είναι να τακτοποιει τους μαθητές της ακολουθίας που την καλεσε.

        Η συνάρτηση restoreQuitness() αλλάζει τους μαθητές , ωστε να υπάρξει ησυχια

        Παραδοχές που έγιναν:
            - Κάθε μαθητής με το που αλλάζει θέση, αν ήταν άτακτος γίνεται ήσυχος.
              Συνεπώς αν ξανά βρεθεί ύστερα απο τυχαίες επαναλήψεις στην αρχίκη του θέση, δεν θα είναι πλεον άτακτος.

            - Ως διαδόχικα ζευγάρια ορίζονται όσα είναι συνολικά διαδοχικά και όχι κατα περίπτωση διαδοχικά.
              Δηλαδή έστω οτι στην ακολουθια 0001111000111100 με 1 συμβολίζονται τα άτακτα ζευγάρια.
              Τα ζευγάρια αυτά ανήκουν στην κατηγορία των διάσπαρτων ζευγαριών γιατι δεν είναι συνολικά διαδοχικα.
              Αντίστοιχα στην ακολουθια 01111000 τα ζευγάρια με 1, θεωρουνται διαδοχικά.

        Λειτουργία συνάρτησης:

            1ο βήμα: Ελέγχω τον αριθμό των άτακτων ζευγαριών και αν αυτά τα ζευγάρια είναι διαδοχικά.
                Αν η μεταβλητή <counter> απο -1 γίνει 0 σημαίνει ότι μόλις βρήκαμε το πρώτο άτακτο ζευγάρι. Στην συνέχεια των
                επαναλήψεων θα πρέπει να ελένξουμε αν υπάρχουν άλλα άτακτα ζευγάρια που είναι διαδοχικά με αυτό το άτακτο ζευγάρι.
                Εφόσον βρήκαμε λοιπόν το πρώτο άτακτο ζευγάρι πρέπει να ελένξουμε αν αργότερα συναντάμε και άλλο ατακτο ζευγάρι,
                που όμως ανάμεσα αυτων των δύο ατακτων ζευγαριών, παρεμβάλονται είτε άτακτος μαθητής, είτε κανένας ατακτος. 
                Σε περίπτωση που ανάμεσα απο δύο ατακτα ζευγάρια παρεμβάλονται τέτοια είδη μαθητών, 
                ΔΕΝ έχουμε διαδοχικά ζευγάρια και άρα το <counter==1>.
            
            2ο βήμα: Αποκατάσταση ησυχίας.
                Υπάρχουν 4 περιπτώσεις:
                    α)  Ένας απο τους δύο μαθητές που είναι στο ζευγάρι να είναι άτακτος.
                        Στην περίπτωση αυτή με rand παράγουμε ένα τυχαίο αριθμο, διαφορετικό απο τον αριθμό της θέσης στην οποία κοιτάμε.
                        Αυτός ο αριθμός θα δείχνει σε μια θέση άλλου  ζευγαριού, με την οποία θα ανταλλάξουμε τον άτακτο
                        μαθητή με έναν ίδιου φύλου μαθητή.
                        Εξετάζουμε και τις δύο θέσεις του ζευγαριού(0 ή 1) που δείχνει ο τυχαιός αριθμός, αφού θέλουμε να βρούμε
                        τον ίδιου φύλλου μαθητή. Αφού τον βρούμε τους εναλλάσουμε και αυξάνουμε τον naughtyCounter του τμήματος που
                        άνηκε ο μαθητής.
                        Άν ο μαθητής ο οποίος ανταλάχθηκε ήταν και αυτός άτακτος, αφού τον εναλλάξαμε, τον κάνουμε ήσυχο και 
                        αυξάνουμε τον naughtyCounter του τμήματος του.
                    
                    β)  Αν έχουμε άτακτα ζευγάρια, αλλά ειναι 1 ή 2.
                        Επαναλαμβάνουμε την ίδια διαδικασία με το (α) και για τους δύο μαθητές.
                    
                    γ)  Άτακτα διάσπαρτα ζευγάρια, περισσοτερα απο 2.
                        Επαναλαμβάνουμε την ίδια διαδικασία με το (α) και για τους δύο μαθητές, με την μόνη
                        διαφορά ότι πλέον εναλλάσουμε με τυχαιους μαθητές απο την επόμενη ακολουθία.
                    
                    δ)  Άτακτα διαδοχικά ζευγάρια, περισσότερα απο 2.
                        Επαναλαμβάνουμε την ίδια διαδικασία με το (α) και για τους δύο μαθητές, με την μόνη
                        διαφορά ότι πλέον εναλλάσουμε με τυχαιους μαθητές απο τυχαία ακολουθία, την οποία
                        διαλέγουμε με rand.

    


    void restore():
        Άπλα καλεί την restoreQuitness() για κάθε ακολουθία που συνδέεται με την ακολουθια, που κάλεσε την συνάρτηση.
    

    void connect(Sequence& sequence):
        
        Βάζουμε στο τέλος την λίστας των ακολουθιών , την νέα ακολουθία που θέλουμε να συνδέσουμε.
        Η συνάρτηση δουλεύει και αν η ακολουθία που θέλουμε να συνδέσουμε, συνδέεται με άλλες ακολουθίες.
        Σε αυτή την περίπτωση συνδέονται ΚΑΙ οι άλλες ακολουθίες.
        Η λίστα που σχηματίζεται είναι κυκλική. Αυτο γιατι απλοποιει τον κωδικα της restoreQuietness, όταν
            επιλέγει τυχαία σε ποια ακολουθία θα μπει ο μαθητής.

        Τέλος αν στην ακολουθια που μόλις προσθέσαμε ο αριθμος των αγοριων ειναι κατα ένα μεγαλύτερος απο τον
        αριθμό των κοριτσιών ή το αντίθετο, διατρέχουμε την λίστα και ψάχνουμε να βρούμε μια ακολουθία
        οπου έχει και αυτη ένα παραπάνω μαθητή του αντίθετου όμως φύλου. Αν υπάρχει , τότε ο μαθητής της
        ακολουθίας που μόλις συνδέθηκε, μεταφέρεται στην πρώτη ακολουθιά που βρήκαμε.    

    void printSequence():
        Άπλα εκτύπωνει τους μαθητές της συγκεκριμένης  ακολουθιας, χώρις τις αναλογες εκτυπώσεις για Tmessy/Tquiet
    
    void print():
        Eτκυπώνει τους μαθητες ΚΑΘΕ ακολουθιας που συνδέεται με την ακολουθία που κάλεσε την συνάρτηση.
        Αν ο naughtyCounter είναι μικρότερος του πλήθους των μαθητών επι το ποσοστό Tquiet, εκτυπώνεται το μύνημα
            "What a quiet class".
        Αν ο naightyCounter είναι μεγαλύτερος του πλήθους των μαθητών επι το ποσοστό Tmessy, εκτυπώνεται το μύνημα
            "What a mess".
        Σε κάθε άλλη περίπτωση εκτυπώνεται το "Please be quiet!".
    
    void increase_counter(Student& s, int number):

        Private συναρτηση. Δεν πρέπει να έχει πρόσβαση ο χρήστης.
        Είναι συνάρτηση που χρησιμοποιήται απο την restoreQuitness() για πιο καθαρο κώδικα.

        Δεχεται ως όρισμα έναν μαθητή και έναν ακέραιο για να αυξηθεί ο naughty counter του τμηματος κατα ανάλογο ποσό.

        Κοιτάει το id του μαθητή και ανάλογα αυξάνει τον αντιστοιχο naughty counter του τμήματος του.
        
        Ο naughty counter του τμήματος του, είναι ουσιαστικά ο naughtyCounter της αρχικής ακολουθίας που άνηκε
        ο μαθητής
        Πχ: Έστω ότι ο μαθητής 0 ανήκει στο τμήμα 0. Για το τμήμα 0 θα δημιουργηθεί η ακολουθία του τμήματος.
        Έστω τώρα οτι ο μαθητής 0 είναι άτακτος και μεταφέρεται σε μια άλλη ακολουθια. Ο naugtyCounter του τμήματος 0
        θα αυξηθει κατα 2. 
        Έστω ότι σε μια άλλη επανάληψη επιλέγουμε ο μαθητης 0 να ξαναγίνει άτακτος και ξανααλλαζει θέση με έναν μαθητή
        σε ένα διαφορετικο τμήμα. Ο μαθητης 0 όμως πιθανως δεν είναι στην ακολουθία του τμήματος 0.Στο τμήμα 0 όμως πρέπει
        να αποδοθεί η αύξηση του naughtyCounter. Η συνάρτηση increase_counter() λοιπον, ψαχνει την ακολουθια του τμήματος 0
        και αυξάνει τον δικό της naughtyCounter.

    
    
